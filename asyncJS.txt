Javascript async


1. What means asynchronous, why is it that important

2. Create index.html and callback.js, promise.js and asyncAwait.js files

3. In callback.js create an array posts of post objects with title and body props

4. create a function called getPosts (mimiking how to get data from server

function getPosts(){
	setTimeout(function(){
		let output = ''
		posts.forEach(post => output += `<li>${post.title}`</li>`);
		document.body.innerHTML = output;
		}, 1000}

5. getPosts();

6.function  createPosts (accepts post and via set timeout of 2000 pushes it to posts array

7. launch this function and spread on why don't we have three posts in the array

8. solve this problem with call back: add callback to createPosts args and than call it after pushing a new post to arrays.

9. Let this callback be getPosts function

10. Proceed to promises, copy the two functions and posts array to promises.js

11. function createPost(post) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      posts.push(post);

      const error = false;

      if (!error) {
        resolve();
      } else {
        reject('Error: Something went wrong');
      }
    }, 2000);
  });
}

12. call CreatePost, passing a post to a function without callback
	createPost({postObject}).then(getPost);

13. set Error to true and see the error poping up in the console

14. show catch after then logging out an error to console.

15. spread on errors check in all js libraries

16. move to Promise.all

17. change the error back to false

18. create multiple promises

const promise1 = Promise.resolve('Hello World')
const promise2 = 10;
const promise3 = new Promise((resolve, reject) => 
setTimeout(resolve, 2000, 'Goodbye'))

Promise.all([promise1, promise2, promise3]).then((values => console.log(values))

19. create another promise 
const promise4 = fetch(jsonplaceholder.typicide.com/users)

20. what about fetch, it uses two thens, one to format it, usually to json, and then retrieve data

21. add promise4 to values and look what's gonna happen

22. add thens to promise4: .then(res => res.json()); and run it

23. Proceed to async/await: it's a way to handle responses, not to write them, so remove all 

24. basicly, we need a function that is labeled async

25. async function init(){
await createPost(post);
getPosts();
}

26. call init()

27. use async/await with fetch
async function fetchUsers() {
const res = await fetch(users);
const data = await res.json();
console.log(data);
}

28. call fetchUsers();













